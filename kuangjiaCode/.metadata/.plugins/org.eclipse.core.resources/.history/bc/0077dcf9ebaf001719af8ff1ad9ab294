<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL">

	<!-- test:判断条件，使用OGNL表达式来写
			特殊字符：  使用转义字符
					使用OGNL提供的写法
		where 在sql语句中加上where，并能处理第一个and的问题
	 -->
	<select id="getEmpsByConditionIf" resultType="com.atguigu.mybaits.beans.Employee">
		select * 
		from tal_employee 
		<!-- <where>
			<if test="id!=null">
				id = #{id} and
			</if>
			<if test="lastName!=null &amp;&amp; lastName.trim()!=&quot;&quot;">
				last_name = #{lastName}	and
			</if>
			<if test="email != null and email.trim() != '' ">
				email = #{email} and 
			</if>
			<if test="gender==0 or gender==1">
				gender = #{gender}
			</if>
		</where> -->
		<!-- trim 
				prefix:前缀
				prefixOverrides:前缀覆盖(去掉)
				suffix:后缀
				suffixOverrides:后缀覆盖(去掉)
		 -->
		<trim prefix="where" suffixOverrides="and">
			<if test="id!=null">
				id = #{id} and
			</if>
			<if test="lastName!=null &amp;&amp; lastName.trim()!=&quot;&quot;">
				last_name = #{lastName}	and
			</if>
			<if test="email != null and email.trim() != '' ">
				email = #{email} and 
			</if>
			<if test="gender==0 or gender==1">
				gender = #{gender}
			</if>
		</trim>
		<!-- where 1=1
		<if test="id!=null">
			id = #{id}
		</if>
		<if test="lastName!=null &amp;&amp; lastName.trim()!=&quot;&quot;">
			and last_name = #{lastName}	
		</if>
		<if test="email != null and email.trim() != '' ">
			and email = #{email}
		</if>
		<if test="gender==0 or gender==1">
			and gender = #{gender}
		</if> -->
	</select>
	<!-- choose:类似与带了break的switch case
				
	 -->
	<select id="getEmpsByConditionChoose" resultType="com.atguigu.mybatis.beans.Employee">
		select *
		from tal_employee
		<where>
			<choose>
				<when test="id!=null">
					id = #{id}
				</when>
				<when test="lastName!=null and lastName!='' ">
					last_name = #{lastName}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>
		</where>
	</select>
	<!-- set:解决修改的时候逗号的问题， -->
	<update id="updateEmpByConditionSet">
		update tal_employee
		set
		<set>
			<if test="lastName!=null and lastNam!='' ">
				last_name = #{lastName},
			</if>
			<if test="email!=null and email!='' ">
				email = #{email},
			</if>
			<if test="gender==0 or gender==1">
				gender = #{gender}
			</if>
		</set>
		where id = #{id}
	</update>
	
	<select id="getEmpsByConditionForeach" resultType="com.atguigu.mybatis.beans.Employee">
		select * 
		from tal_employee 
		where id in
		<!-- foreach:
				collection:指定要遍历的集合
				item:指定将当前迭代出的元素赋值给指定的变量
				open:指定开始的字符
				close:指定结束的字符
				separator:指定元素与元素之间的分隔符号
				index:
					遍历list的时候，index代表list的索引
					遍历map的时候，index代表map的key
			对于集合类型的参数，MyBatis也会做特殊处理，封装为map
				规则：
					conllection(list/set):key就是collection
					List:key就是collection、list
		 -->
		<foreach collection="ids" item="curr_id" open="(" close=")" separator=",">
			#{curr_id }
		</foreach>
		
	</select>
	
		<!-- 使用foreach完成MySql批量操作(增删改).
				1.2.
		-->
		<!-- 默认情况下，不允许将多条sql语句通过;隔开
			需要在链接的url上添加一个属性：allowMultiQueries=true
		 -->
		<insert id="addEmpsBatch">
			insert into tal_employee(last_name,email,gender,d_id) values
			<foreach collection="emps" item="e" separator=",">
				(#{e.lastName},#{e.eamil},#{e.gender},#{e.dept.id})
			</foreach>
		</insert>
		
		<!-- 两个内置参数：
				_parameter:代表整个参数
					单个参数：就代表这个参数
					多个参数：会被封装成map，代表这个map
					
				_databaseId:代表当前数据库的别名
					使用_databaseId的前提是必须要配置databaseIdProvider
		 -->
		 <select id="getEmpsTestInnerParameter" resultType="com.atguigu.mybatis.beans.Employee">
		 	<!-- 通过bind绑定一个值到一个变量中 -->
		 	<bind name="newLastName" value="'%'+lastName+'%'"/>
		 	<if test="_databaseId=='mysql'">
		 		select * from tal_employee 
		 		<if test="lastName!=null">
			 		where last_name like #{newLastName}
		 		</if>
		 	</if>
		 	<if test="_databaseId=='oracle'">
		 		select * from orcl_employee where id = #{id}
		 	</if>
		 	<!-- select * from tal_employee where id = #{id} -->
		 	<!-- select * from tal_employee where id = ${_parameter} -->
		 	<!-- select * from tal_employee where id = ${_parameter.id} -->
		 </select>
</mapper>