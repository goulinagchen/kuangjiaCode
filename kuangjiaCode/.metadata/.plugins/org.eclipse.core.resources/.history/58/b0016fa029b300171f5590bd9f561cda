package hibernate.bean;

import javax.xml.soap.Text;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;
import org.junit.Test;

public class HibernateTest {

	// @Test
	public SessionFactory testSessionFactory() {

		Configuration configuration = new Configuration();
		configuration.configure();

		ServiceRegistryBuilder builder = new ServiceRegistryBuilder();
		builder.applySettings(configuration.getProperties());
		ServiceRegistry serviceRegistry = builder.buildServiceRegistry();
		SessionFactory buildSessionFactory = configuration.buildSessionFactory(serviceRegistry);
		System.out.println(buildSessionFactory);
		return buildSessionFactory;
	}

	@Test
	public void testStudent() {
		SessionFactory sessionFactory = testSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction ts = null;
		try {
			ts = session.beginTransaction();
			Student student = new Student();
			student.setName("Orwen");
			student.setAge(19);
			student.setEmail("ow@sina.com");
			session.save(student);

			ts.commit();
		} catch (Exception e) {
			ts.rollback();
		} finally {
			session.close();
		}
	}

	@Test
	public void testObjectState() {
		SessionFactory sessionFactory = testSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction ts = null;
		try {
			ts = session.beginTransaction();

			Student student = new Student("Orwen", 19, "ow@sina.com");// 临时状态
																		// 没有oid
																		// session缓存没有
																		// 数据库没有
			session.save(student);// 持久化状态 有oid session缓存有 数据库有
			Student student2 = (Student) session.get(Student.class, 5);// 持久化状态
			// 游离状态 托管状态（下面三种）
			session.clear();// 清空session缓存
			session.evict(student);// 清空key为student的session缓存
			session.close();// 关闭session，不能再使用session查询等操作

			session.delete(student2);// 删除状态 oid没有 session中没有 数据库没有

			ts.commit();
		} catch (Exception e) {
			ts.rollback();
		} finally {
			session.close();
		}
	}

	@Test
	public void testSessionCache() {
		Session session = testSessionFactory().openSession();
		Transaction tc = null;
		try {
			tc = session.beginTransaction();
			Student student = (Student) session.get(Student.class, 7);
			System.out.println(student);

			// session.clear();
			// session.evict(student);
			// session.close();
			System.out.println("-----------------------");

			Student student2 = (Student) session.get(Student.class, 7);
			System.out.println(student2);
			System.out.println(student == student2);

			tc.commit();
		} catch (Exception e) {
			tc.rollback();
		} finally {
			session.close();
		}
	}
}
